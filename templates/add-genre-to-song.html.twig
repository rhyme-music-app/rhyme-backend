<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Genres of Songs</title>
    <link rel="stylesheet" type="text/css" href="/css/global.css">
    <link rel="stylesheet" type="text/css" href="/css/table.css">
</head>
<body>
    {{ include("components/_header.html.twig") }}
    <h1>Song's Genre Manager</h1>
    {% if not user.authenticated %}
    <p style="color: red;">Please <a href="/login">log in as an administrator</a> to view this page.</p>
    {% else %}
    {% if not songId %}
    <p style="color: red;">Invalid request.</p>
    {% else %}




    <button class="button" onclick="back()" style="margin: 20px;">Back</button>

    <h2 id="song-name"></h2>

    <div id="error-section-wrapper" style="color: red; display: none;">
        <b>ERROR:</b> <span id="error-section"></span>
    </div>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Image Link</th>
                <th>Added At</th>
                <th>Updated At</th>
                <th>Added By</th>
                <th>Updated By</th>
                <th>OPERATIONS</th>
            </tr>
        </thead>
        <tbody id="genre-list">
        </tbody>
    </table>

    <input type="text" id="song-id-holder" value="{{ songId }}" hidden disabled>

    <script>
        function back() {
            window.location.href = `/manage/songs/editor?id=${songId}`;
        }

        const songId = document.getElementById('song-id-holder').value;

        const onError = (err) => {
            document.getElementById('error-section').innerHTML = err?.message;
            document.getElementById('error-section-wrapper').style.display = 'block';
        };

        window.onload = async () => {
            const genreList = document.getElementById('genre-list');
            while (genreList.lastChild) {
                genreList.removeChild(genreList.lastChild);
            }

            Promise.all([
                fetch(`/api/genres`, {
                    method: 'GET',
                })
                .then((res) => res.json()),

                fetch(`/api/songs/${songId}/genres`, {
                    method: 'GET',
                })
                .then((res) => res.json()),

                fetch(`/api/songs/${songId}`, {
                    method: 'GET',
                })
                .then((res) => res.json()),
            ])
            .then(([allGenresData, associatedGenresData, songData]) => {
                if (!allGenresData?.success) {
                    return onError(allGenresData);
                }

                if (!associatedGenresData?.success) {
                    return onError(associatedGenresData);
                }

                if (!songData?.success) {
                    return onError(songData);
                }

                document.getElementById('song-name').innerHTML = songData.name;

                return allGenresData.list.filter((genre) => {
                    // Filter out the genres already associated with this song,
                    // only keep the genres that are not added to this song
                    // yet (hereafter "alien genres").
                    return associatedGenresData.list.filter((g) => g.id == genre.id).length == 0;
                });
            })
            .then((alienGenres) => {
                const convertFieldToHtmlTd = (genre, fieldName) => {
                    const td = document.createElement('td');
                    td.innerHTML = (
                        genre[fieldName] === null
                        ? `<span class="entity-${fieldName} null-cell">null</span>`
                        : `<span class="entity-${fieldName}">${
                            fieldName.includes('link')
                            ? `<a href="${genre[fieldName]}">${genre[fieldName]}</a>`
                            : genre[fieldName]
                        }</span>`
                    );
                    return td;
                };

                const createOperationsTd = (genre) => {
                    const onAdd = () => {
                        fetch(`/api/songs/${songId}/genres/${genre.id}`, {
                            method: 'POST',
                        })
                        .then((res) => res.json())
                        .then((data) => {
                            if (!data?.success) {
                                return onError(data);
                            }
                            window.location.reload();
                        })
                        .catch(onError);
                    }

                    const addButton = document.createElement('button');
                    addButton.innerHTML = "Add to Song";
                    addButton.className = "button";
                    addButton.onclick = onAdd;

                    const operationTd = document.createElement('td');
                    operationTd.className = 'entity-operations';
                    operationTd.appendChild(addButton);
                    return operationTd;
                };

                for (const genre of alienGenres) {
                    const tr = document.createElement('tr');
                    tr.appendChild(convertFieldToHtmlTd(genre, 'id'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'name'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'image_link'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'added_at'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'updated_at'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'added_by'));
                    tr.appendChild(convertFieldToHtmlTd(genre, 'updated_by'));
                    tr.appendChild(createOperationsTd(genre));
                    genreList.appendChild(tr);
                }
            })
            .catch(onError);
        }
    </script>




    {% endif %}
    {% endif %}
    {{ include("components/_footer.html.twig") }}
</body>
</html>