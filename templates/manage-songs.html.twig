<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manage Songs</title>
    <link rel="stylesheet" type="text/css" href="/css/global.css">
    <link rel="stylesheet" type="text/css" href="/css/table.css">
</head>
<body>
    {{ include("components/_header.html.twig") }}
    <h1>Song Manager</h1>
    {% if not user.authenticated %}
    <p style="color: red;">Please <a href="/login">log in as an administrator</a> to view this page.</p>
    {% else %}


    <button class="button" onclick="back()" style="margin: 20px;">Back</button>

    <div class="section">
        <div id="error-section-wrapper" style="color: red; display: none;">
            <b>ERROR:</b> <span id="error-section"></span>
        </div>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Audio Link</th>
                    <th>Image Link</th>
                    <th>Added At</th>
                    <th>Updated At</th>
                    <th>Added By</th>
                    <th>Updated By</th>
                    <th>Streams</th>
                    <th>OPERATIONS</th>
                </tr>
            </thead>
            <tbody id="song-list">
            </tbody>
        </table>
        <button class="button button-primary" onclick="javascript:addSong();">Add song</button>
    </div>

    <div class="section">
        <h2>Update Song Search Index</h2>
        <p style="color: red;">If songs you&#39;ve added do not appear in the frontend's search bar, you should update Algolia Song Search Index.</p>
        <div>
            <input type="checkbox" id="delete-old-index-records">
            <label for="delete-old-index-records">Delete old index records</label>
        </div>
        <div>
            <button class="button button-primary" onclick="updateSongSearchIndex()">
                Update Index
            </button>
            <span id="updating-song-index" style="display: none; color: #CCCC00;">Working...</span>
        </div>
        <div id="update-song-index-error-wrapper" style="color: red; display: none;">
            <b>ERROR: </b>
            <span id="update-song-index-error"></span>
        </div>
        <div id="update-song-index-success-wrapper" style="color: green; display: none;">
            <b>SUCCESS: </b>
            <span id="update-song-index-success"></span>
        </div>
    </div>

    <script>
        function back() {
            window.location.href = '/dashboard';
        }

        function updateSongSearchIndex() {
            const deleteOldIndexRecords = document.getElementById('delete-old-index-records').checked;
            const updateSongIndexErrorWrapper = document.getElementById('update-song-index-error-wrapper');
            const updateSongIndexError = document.getElementById('update-song-index-error');
            const updateSongIndexSuccessWrapper = document.getElementById('update-song-index-success-wrapper');
            const updateSongIndexSuccess = document.getElementById('update-song-index-success');
            const loadingIndicator = document.getElementById('updating-song-index');

            const setError = (err) => {
                updateSongIndexSuccessWrapper.style.display = 'none';
                updateSongIndexSuccess.innerHTML = '';
                updateSongIndexError.innerHTML = err?.message;
                updateSongIndexErrorWrapper.style.display = 'block';
            };

            const setSuccess = (data) => {
                updateSongIndexErrorWrapper.style.display = 'none';
                updateSongIndexError.innerHTML = '';
                updateSongIndexSuccess.innerHTML = data.message;
                updateSongIndexSuccessWrapper.style.display = 'block';
            };

            loadingIndicator.style.display = 'block';
            updateSongIndexErrorWrapper.style.display = 'none';
            updateSongIndexSuccessWrapper.style.display = 'none';
            fetch(`/api/index/songs${deleteOldIndexRecords ? '?reset=true' : ''}`, {
                method: 'PATCH',
            })
            .then((res) => res.json())
            .then((data) => {
                if (!data?.success) {
                    return setError(data);
                }
                setSuccess(data);
            })
            .catch(setError)
            .finally(() => {
                loadingIndicator.style.display = 'none';
            });
        }

        function addSong() {
            window.location.href = "/manage/songs/editor";
        }

        const onError = (err) => {
            document.getElementById('error-section').innerHTML = err?.message;
            document.getElementById('error-section-wrapper').style.display = 'block';
        };

        window.onload = () => {
            const songList = document.getElementById('song-list');
            while (songList.lastChild) {
                songList.removeChild(songList.lastChild);
            }

            fetch('/api/songs', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                },
            })
            .then((res) => res.json())
            .then((data) => {
                if (!data?.success) {
                    onError(data);
                    return;
                }

                const convertFieldToHtmlTd = (song, fieldName) => {
                    const td = document.createElement('td');
                    td.innerHTML = (
                        song[fieldName] === null
                        ? `<span class="entity-${fieldName} null-cell">null</span>`
                        : `<span class="entity-${fieldName}">${
                            fieldName.includes('link')
                            ? `<a href="${song[fieldName]}">${song[fieldName]}</a>`
                            : song[fieldName]
                        }</span>`
                    );
                    td.className = `entity-${fieldName}-td`;
                    return td;
                }

                const createOperationsTd = (song) => {
                    const onEdit = () => {
                        window.location.href = `/manage/songs/editor?id=${song.id}`;
                    };
                    const onDelete = () => {
                        if (confirm(`Are you sure to delete this song?\n\n${song.name}`)) {
                            fetch(`/api/songs/${song.id}`, {
                                method: 'DELETE'
                            })
                            .then((res) => res.json())
                            .then((data) => {
                                if (!data?.success) {
                                    onError(data);
                                    return;
                                }

                                window.location.reload();
                            })
                            .catch(onError);
                        }
                    };

                    const editButton = document.createElement('button');
                    editButton.innerHTML = "Edit";
                    editButton.className = "button";
                    editButton.onclick = onEdit;

                    const deleteButton = document.createElement('button');
                    deleteButton.innerHTML = "Delete";
                    deleteButton.className = "button button-danger";
                    deleteButton.onclick = onDelete;

                    const operationTd = document.createElement('td');
                    operationTd.className = 'entity-operations';
                    operationTd.appendChild(editButton);
                    operationTd.appendChild(deleteButton);
                    return operationTd;
                };

                for (const song of data.list) {
                    const tr = document.createElement('tr');
                    tr.appendChild(convertFieldToHtmlTd(song, 'id'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'name'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'audio_link'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'image_link'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'added_at'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'updated_at'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'added_by'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'updated_by'));
                    tr.appendChild(convertFieldToHtmlTd(song, 'streams'));
                    tr.appendChild(createOperationsTd(song));
                    songList.appendChild(tr);
                }
            })
            .catch(onError);
        }
    </script>




    {% endif %}
    {{ include("components/_footer.html.twig") }}
</body>
</html>